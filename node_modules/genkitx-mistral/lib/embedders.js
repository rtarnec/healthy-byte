"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var embedders_exports = {};
__export(embedders_exports, {
  SUPPORTED_EMBEDDING_MODELS: () => SUPPORTED_EMBEDDING_MODELS,
  TextEmbeddingConfigSchema: () => TextEmbeddingConfigSchema,
  mistralEmbedder: () => mistralEmbedder,
  mistralembed: () => mistralembed
});
module.exports = __toCommonJS(embedders_exports);
var import_genkit2 = require("genkit");
const TextEmbeddingConfigSchema = import_genkit2.z.object({
  embeddingTypes: import_genkit2.z.literal("float").optional(),
  encodingFormat: import_genkit2.z.union([import_genkit2.z.literal("float"), import_genkit2.z.literal("base64")]).optional()
});
function mistralEmbedder(ai, name, client) {
  const model = SUPPORTED_EMBEDDING_MODELS[name];
  if (!model) throw new Error(`Unsupported model: ${name}`);
  ai.defineEmbedder(
    {
      info: model.info,
      configSchema: TextEmbeddingConfigSchema,
      name: model.name
    },
    (input, _) => __async(this, null, function* () {
      const embeddings = yield client.embeddings.create({
        model: name,
        inputs: input.map((d) => d.text)
      });
      return {
        embeddings: embeddings.data.map((d) => {
          if (!d.embedding) {
            throw new Error("Embedding is undefined");
          }
          return { embedding: d.embedding };
        })
      };
    })
  );
}
const mistralembed = (0, import_genkit2.embedderRef)({
  name: "mistral/mistral-embed",
  configSchema: TextEmbeddingConfigSchema,
  info: {
    dimensions: 1024,
    label: "Mistral - Mistral Embed",
    supports: {
      input: ["text"]
    }
  }
});
const SUPPORTED_EMBEDDING_MODELS = {
  "mistral-embed": mistralembed
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  SUPPORTED_EMBEDDING_MODELS,
  TextEmbeddingConfigSchema,
  mistralEmbedder,
  mistralembed
});
//# sourceMappingURL=embedders.js.map