"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var src_exports = {};
__export(src_exports, {
  default: () => src_default,
  mistral: () => mistral,
  mistralembed: () => import_embedders2.mistralembed,
  ocr: () => import_ocr2.ocr,
  openCodestral: () => import_mistral_llms2.openCodestral,
  openCodestralMambda: () => import_mistral_llms2.openCodestralMambda,
  openMinistral3B: () => import_mistral_llms2.openMinistral3B,
  openMinistral8B: () => import_mistral_llms2.openMinistral8B,
  openMistral7B: () => import_mistral_llms2.openMistral7B,
  openMistral8x7B: () => import_mistral_llms2.openMistral8x7B,
  openMistralLarge: () => import_mistral_llms2.openMistralLarge,
  openMistralMedium: () => import_mistral_llms2.openMistralMedium,
  openMistralNemo: () => import_mistral_llms2.openMistralNemo,
  openMistralSaba: () => import_mistral_llms2.openMistralSaba,
  openMistralSmall: () => import_mistral_llms2.openMistralSmall,
  openMixtral8x22B: () => import_mistral_llms2.openMixtral8x22B,
  openPixtral: () => import_mistral_llms2.openPixtral,
  openPixtralLarge: () => import_mistral_llms2.openPixtralLarge
});
module.exports = __toCommonJS(src_exports);
var import_plugin = require("genkit/plugin");
var import_mistralai = require("@mistralai/mistralai");
var import_embedders = require("./embedders");
var import_mistral_llms = require("./mistral_llms");
var import_ocr = require("./ocr");
var import_mistral_llms2 = require("./mistral_llms");
var import_ocr2 = require("./ocr");
var import_embedders2 = require("./embedders");
const mistral = (options) => (0, import_plugin.genkitPlugin)("mistral", (ai) => __async(void 0, null, function* () {
  let apiKey = (options == null ? void 0 : options.apiKey) || process.env.MISTRAL_API_KEY;
  if (!apiKey) {
    throw new Error(
      "Please pass in the API key or set the MISTRAL_API_KEY environment variable"
    );
  }
  let customModels = (options == null ? void 0 : options.customModels) || {};
  if (Object.keys(customModels).length > 0) {
    for (const [name, model] of Object.entries(customModels)) {
      if (model) {
        import_mistral_llms.SUPPORTED_MISTRAL_MODELS[name] = model;
      }
    }
  }
  const client = new import_mistralai.Mistral(options);
  for (const name of Object.keys(import_mistral_llms.SUPPORTED_MISTRAL_MODELS)) {
    (0, import_mistral_llms.mistralModel)(ai, name, client);
  }
  for (const name of Object.keys(import_embedders.SUPPORTED_EMBEDDING_MODELS)) {
    (0, import_embedders.mistralEmbedder)(ai, name, client);
  }
  (0, import_ocr.OCRModel)(ai, client);
}));
var src_default = mistral;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  mistral,
  mistralembed,
  ocr,
  openCodestral,
  openCodestralMambda,
  openMinistral3B,
  openMinistral8B,
  openMistral7B,
  openMistral8x7B,
  openMistralLarge,
  openMistralMedium,
  openMistralNemo,
  openMistralSaba,
  openMistralSmall,
  openMixtral8x22B,
  openPixtral,
  openPixtralLarge
});
//# sourceMappingURL=index.js.map